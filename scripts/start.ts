import { $ } from 'bun';

const openDocs = process.argv.includes('--docs') || process.argv.includes('-d');

async function openDocumentation() {
    const DOCS_URL = 'http://localhost:3000/docs';
    const SPEC_URL = 'http://localhost:3000/api-spec.json';

    console.log('\nüìö API Documentation URLs:');
    console.log(`Interactive Docs:  ${DOCS_URL}`);
    console.log(`OpenAPI Spec:      ${SPEC_URL}\n`);

    try {
        if (process.platform === 'win32') {
            await $`start ${DOCS_URL}`;
        } else if (process.platform === 'darwin') {
            await $`open ${DOCS_URL}`;
        } else {
            await $`xdg-open ${DOCS_URL}`;
        }
        console.log('üÜó Opened documentation in your default browser');
    } catch (error) {
        console.log('‚ö†Ô∏è Could not open browser automatically');
        console.log(`‚ö†Ô∏è Please visit: ${DOCS_URL}`);
    }

    console.log('\nüéØ Features:');
    console.log('    ‚Ä¢ Interactive API playground');
    console.log('    ‚Ä¢ Try endpoints directly in browser');
    console.log('    ‚Ä¢ Authentication support');
    console.log('    ‚Ä¢ Custom Murderous Hack branding');
    console.log('    ‚Ä¢ Export to Postman/Insomnia');
}

(async () => {
    console.log(`
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

                       ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
                       ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
                       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
                       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó
                       ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
                       ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
`);

    try {
        console.log('üÜó Checking database...');
        try {
            await $`docker compose exec -T postgres-db pg_isready -U user -d murderous-hack-db`.quiet();
            console.log('üÜó Database is ready');
        } catch {
            console.log('üÜó Starting database...');
            await $`docker compose up -d postgres-db`;
            console.log('‚åõ Waiting for database...');
            await new Promise((resolve) => setTimeout(resolve, 6969));
        }

        console.log('üÜó Killing any existing processes on ports 3000 and 3001...');
        try {
            await $`bunx kill-port 3000 3001`.quiet();
        } catch {
            console.log('üí° Ports 3000 and 3001 are not in use');
        }

        console.log('üÜó Starting backend server...');
        const backend = Bun.spawn(['bun', 'run', 'dev'], {
            cwd: process.cwd(),
            stdout: 'inherit',
            stderr: 'inherit',
        });

        console.log('üÜó Starting frontend server...');
        const frontend = Bun.spawn(['bun', 'run', 'dev'], {
            cwd: 'frontend',
            stdout: 'inherit',
            stderr: 'inherit',
        });

        process.on('SIGINT', async () => {
            console.log('\nüÜó Shutting down servers...');
            backend.kill();
            frontend.kill();
            try {
                await $`bunx kill-port 3000 3001`.quiet();
            } catch {}
            process.exit(0);
        });

        console.log('‚úÖ Development environment is up and running!');
        console.log('‚ú® Frontend:  http://localhost:3001');
        console.log('‚ú® Server:    http://localhost:3000');

        if (openDocs) {
            console.log('‚åõ Waiting for backend to be ready...');
            let retries = 0;
            const maxRetries = 30;

            while (retries < maxRetries) {
                try {
                    await fetch('http://localhost:3000/api/user');
                    await openDocumentation();
                    break;
                } catch {
                    retries++;
                    await new Promise((resolve) => setTimeout(resolve, 1000));
                }
            }

            if (retries >= maxRetries) {
                console.log('‚ö†Ô∏è Backend took too long to start, skipping docs!');
            }
        }

        console.log('üí° Press Ctrl+C to stop');
        console.log('üí° Use --docs or -d flag to open API documentation');

        await new Promise(() => {});
    } catch (error) {
        console.error('‚ùå Start failed:', error);
        process.exit(1);
    }
})();
